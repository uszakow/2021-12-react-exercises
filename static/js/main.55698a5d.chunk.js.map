{"version":3,"sources":["components/random-numbers/random-numbers.js","components/quotes/quotes.js","img/everest.jpg","components/fill-image/fill-image.js","index.js"],"names":["RandomNumbers","useState","oddNumbers","setOddNumbers","evenNumbers","setEvenNumbers","createRandomNumbers","length","min","max","res","i","randomNumber","Math","floor","random","push","column","arr","map","item","index","className","Fragment","onClick","randomNumbers","odd","even","forEach","num","sort","num1","num2","Quotes","quotes","setQuotes","useEffect","loadQuote","a","fetch","resp","json","data","randomNum","randomQuote","prevQuotes","console","error","href","newQuotes","pop","quote","author","FillImage","fill","setFill","body","document","getElementsByTagName","classList","add","src","image","alt","remove","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"iQAuEeA,EApEO,WAClB,MAAoCC,qBAApC,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsCF,qBAAtC,mBAAOG,EAAP,KAAoBC,EAApB,KAiBMC,EAAsB,SAACC,GAEzB,IAFyD,IAAxBC,EAAuB,uDAAjB,EAAGC,EAAc,uDAAR,IAC1CC,EAAM,GACHC,EAAI,EAAGA,EAAIJ,EAAQI,IAAK,CAC7B,IAAMC,EAAeC,KAAKC,MAAMD,KAAKE,SAAWN,GAAOD,EACvDE,EAAIM,KAAKJ,GAEb,OAAOF,GAGLO,EAAS,SAACC,GAAD,OACXA,EAAIC,KAAI,SAACC,EAAMC,GACX,OACI,qBAAiBC,UAAU,OAA3B,SACKF,GADKC,OAMtB,OACI,eAAC,IAAME,SAAP,WACI,2CACA,sDACA,mBAAGD,UAAU,cAAb,8XAOA,wBAAQA,UAAU,SAASE,QA5CR,WACvB,IAAMC,EAAgBnB,EAAoB,IAEpCoB,EAAM,GACNC,EAAO,GACbF,EAAcG,SAAQ,SAACC,GACnBA,EAAM,IAAM,EAAIF,EAAKX,KAAKa,GAAOH,EAAIV,KAAKa,MAG9CH,EAAII,MAAK,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,KAChCL,EAAKG,MAAK,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,KACjC7B,EAAc,GAAD,OAAKuB,IAClBrB,EAAe,GAAD,OAAKsB,KAgCf,8BAICzB,GAAcE,GACX,sBAAKkB,UAAU,uBAAf,UACI,sBAAKA,UAAU,SAAf,UACI,qBAAKA,UAAU,SAAf,yBACCL,EAAOf,MAEZ,sBAAKoB,UAAU,SAAf,UACI,qBAAKA,UAAU,SAAf,0BACCL,EAAOb,a,8BCHjB6B,EA1DA,WACX,MAA4BhC,mBAAS,IAArC,mBAAOiC,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACNC,MACD,IAEH,IAAMA,EAAS,uCAAG,kCAAAC,EAAA,+EAESC,MACf,yIAHM,cAEJC,EAFI,gBAKSA,EAAKC,OALd,OAKJC,EALI,OAOJC,EAAY9B,KAAKC,MAAMD,KAAKE,SAAW2B,EAAKnC,QAC5CqC,EAAcF,EAAKC,GAEzBR,GAAU,SAACU,GAAD,4BAAoBA,GAApB,CAAgCD,OAVhC,kDAYVE,QAAQC,MAAR,MAZU,0DAAH,qDAwBf,OACI,eAAC,IAAMxB,SAAP,WACI,4CACA,oBAAGD,UAAU,cAAb,gJAEI,mBAAG0B,KAAK,wIAAR,kBAFJ,mKASA,wBAAQ1B,UAAU,SAASE,QAASa,EAApC,iCAGCH,EAAO3B,OAAS,GACb,wBAAQe,UAAU,SAASE,QAxBnB,WAChB,GAAIU,EAAO3B,OAAS,EAAG,CACnB,IAAM0C,EAAS,YAAOf,GACtBe,EAAUC,MACVf,EAAUc,KAoBN,6BAKHf,EAAO3B,OAAS,GAAK,oCAAO2B,EAAOA,EAAO3B,OAAS,GAAG4C,MAAjC,OACrBjB,EAAO3B,OAAS,GAAK,8BAAM2B,EAAOA,EAAO3B,OAAS,GAAG6C,aCvDnD,MAA0B,oCCqC1BC,G,MAjCG,WACd,MAAwBpD,oBAAS,GAAjC,mBAAOqD,EAAP,KAAaC,EAAb,KACMC,EAAOC,SAASC,qBAAqB,QAAQ,GAWnD,OACI,eAAC,IAAMnC,SAAP,WACI,kDACA,mBAAGD,UAAU,cAAb,sMAIA,wBAAQA,UAAU,SAASE,QAhBnB,WACZ+B,GAAQ,GACRC,EAAKG,UAAUC,IAAI,cAcf,qCAGCN,GACG,eAAC,IAAM/B,SAAP,WACI,qBAAKsC,IAAKC,EAAOC,IAAI,UAAUzC,UAAU,eACzC,qBAAKA,UAAU,mBAAmBE,QAlBjC,WACb+B,GAAQ,GACRC,EAAKG,UAAUK,OAAO,wBCNxBC,EAAM,WACR,OACI,eAAC,IAAM1C,SAAP,WACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QAKZ2C,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJX,SAASY,eAAe,W","file":"static/js/main.55698a5d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './random-numbers.scss';\r\n\r\nconst RandomNumbers = () => {\r\n    const [oddNumbers, setOddNumbers] = useState();\r\n    const [evenNumbers, setEvenNumbers] = useState();\r\n\r\n    const sortEvenOddNumbers = () => {\r\n        const randomNumbers = createRandomNumbers(20);\r\n\r\n        const odd = [];\r\n        const even = [];\r\n        randomNumbers.forEach((num) => {\r\n            num % 2 === 0 ? even.push(num) : odd.push(num);\r\n        });\r\n\r\n        odd.sort((num1, num2) => num1 - num2);\r\n        even.sort((num1, num2) => num1 - num2);\r\n        setOddNumbers([...odd]);\r\n        setEvenNumbers([...even]);\r\n    };\r\n\r\n    const createRandomNumbers = (length, min = 1, max = 100) => {\r\n        const res = [];\r\n        for (let i = 0; i < length; i++) {\r\n            const randomNumber = Math.floor(Math.random() * max) + min;\r\n            res.push(randomNumber);\r\n        }\r\n        return res;\r\n    };\r\n\r\n    const column = (arr) =>\r\n        arr.map((item, index) => {\r\n            return (\r\n                <div key={index} className=\"item\">\r\n                    {item}\r\n                </div>\r\n            );\r\n        });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Exercises</h1>\r\n            <h2>I. Przeglądarka</h2>\r\n            <p className=\"description\">\r\n                Zadanie polega na napisaniu skryptu w JavaScript, który po kliknięciu w przycisk wygeneruje 20 losowych\r\n                liczb całkowitych z zakresu od 1 do 100 i umieści je w dwóch kolumnach. W jednej kolumnie mają znaleźć\r\n                się tylko liczby parzyste, a w drugiej nieparzyste. Dodatkowo obie kolumny muszą być posortowane\r\n                rosnąco.\r\n            </p>\r\n\r\n            <button className=\"button\" onClick={sortEvenOddNumbers}>\r\n                Generate numbers\r\n            </button>\r\n\r\n            {oddNumbers && evenNumbers && (\r\n                <div className=\"random-numbers-table\">\r\n                    <div className=\"column\">\r\n                        <div className=\"header\">Odd numbers</div>\r\n                        {column(oddNumbers)}\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div className=\"header\">Even numbers</div>\r\n                        {column(evenNumbers)}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default RandomNumbers;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nconst Quotes = () => {\r\n    const [quotes, setQuotes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        loadQuote();\r\n    }, []);\r\n\r\n    const loadQuote = async () => {\r\n        try {\r\n            const resp = await fetch(\r\n                'https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json'\r\n            );\r\n            const data = await resp.json();\r\n\r\n            const randomNum = Math.floor(Math.random() * data.length);\r\n            const randomQuote = data[randomNum];\r\n\r\n            setQuotes((prevQuotes) => [...prevQuotes, randomQuote]);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n\r\n    const removeQuote = () => {\r\n        if (quotes.length > 1) {\r\n            const newQuotes = [...quotes];\r\n            newQuotes.pop();\r\n            setQuotes(newQuotes);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h2>III. React</h2>\r\n            <p className=\"description\">\r\n                Przygotowanie aplikacji, która będzie pobierała cytaty z API, która będzie wyświetlała losowy cytat:\r\n                <a href=\"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\">\r\n                    link\r\n                </a>\r\n                . Dodatkowo stwórz przycisk który umożliwi wylosowanie następnego cytatu oraz przycisk, który pozwoli na\r\n                powrót do poprzedniego cytatu.\r\n            </p>\r\n\r\n            <button className=\"button\" onClick={loadQuote}>\r\n                Następny cytat\r\n            </button>\r\n            {quotes.length > 1 && (\r\n                <button className=\"button\" onClick={removeQuote}>\r\n                    Poprzedni cytat\r\n                </button>\r\n            )}\r\n\r\n            {quotes.length > 0 && <div>\"{quotes[quotes.length - 1].quote}\"</div>}\r\n            {quotes.length > 0 && <div>{quotes[quotes.length - 1].author}</div>}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Quotes;\r\n","export default __webpack_public_path__ + \"static/media/everest.5050cc15.jpg\";","import React, { useState } from 'react';\r\nimport image from './../../img/everest.jpg';\r\nimport './fill-image.scss';\r\n\r\nconst FillImage = () => {\r\n    const [fill, setFill] = useState(false);\r\n    const body = document.getElementsByTagName('body')[0];\r\n\r\n    const openImg = () => {\r\n        setFill(true);\r\n        body.classList.add('body-fill');\r\n    };\r\n    const closeImg = () => {\r\n        setFill(false);\r\n        body.classList.remove('body-fill');\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h2>IV. Frontend CSS</h2>\r\n            <p className=\"description\">\r\n                Umieść na stronie zdjęcie, które zawsze będzie zajmowało 100% szerokości oraz 100% widoku okna\r\n                przeglądarki. Obrazek ma zachowywać proporcje.\r\n            </p>\r\n            <button className=\"button\" onClick={openImg}>\r\n                Pokaż zdjęcie\r\n            </button>\r\n            {fill && (\r\n                <React.Fragment>\r\n                    <img src={image} alt=\"everest\" className=\"fill-image\" />\r\n                    <div className=\"fill-image-close\" onClick={closeImg}></div>\r\n                </React.Fragment>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default FillImage;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.scss';\n\nimport RandomNumbers from './components/random-numbers/random-numbers';\nimport Quotes from './components/quotes/quotes';\nimport FillImage from './components/fill-image/fill-image';\n\nconst App = () => {\n    return (\n        <React.Fragment>\n            <RandomNumbers />\n            <Quotes />\n            <FillImage />\n        </React.Fragment>\n    );\n};\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}