{"version":3,"sources":["components/random-numbers/random-numbers.js","components/library/library.js","components/quotes/quotes.js","img/everest.jpg","components/fill-image/fill-image.js","index.js"],"names":["RandomNumbers","useState","oddNumbers","setOddNumbers","evenNumbers","setEvenNumbers","createRandomNumbers","length","min","max","res","i","randomNumber","Math","floor","random","push","column","arr","map","item","index","className","Fragment","onClick","randomNumbers","odd","even","forEach","num","sort","num1","num2","Library","title","setTitle","author","setAuthor","priority","setPriority","categories","setCategories","memoryBooks","setMemoryBooks","useEffect","loadBooks","booksArr","Object","entries","localStorage","key","value","includes","book","JSON","parse","row","join","removeItem","style","listStyleType","name","onSubmit","e","preventDefault","setItem","stringify","target","reset","htmlFor","type","id","minLength","required","onChange","size","multiple","Array","from","selectedOptions","option","Quotes","quotes","setQuotes","loadQuote","a","fetch","resp","json","data","randomNum","randomQuote","prevQuotes","console","error","href","newQuotes","pop","quote","FillImage","fill","setFill","body","document","getElementsByTagName","classList","add","src","image","alt","remove","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e745966b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './random-numbers.scss';\r\n\r\nconst RandomNumbers = () => {\r\n    const [oddNumbers, setOddNumbers] = useState();\r\n    const [evenNumbers, setEvenNumbers] = useState();\r\n\r\n    const sortEvenOddNumbers = () => {\r\n        const randomNumbers = createRandomNumbers(20);\r\n\r\n        const odd = [];\r\n        const even = [];\r\n        randomNumbers.forEach((num) => {\r\n            num % 2 === 0 ? even.push(num) : odd.push(num);\r\n        });\r\n\r\n        odd.sort((num1, num2) => num1 - num2);\r\n        even.sort((num1, num2) => num1 - num2);\r\n        setOddNumbers([...odd]);\r\n        setEvenNumbers([...even]);\r\n    };\r\n\r\n    const createRandomNumbers = (length, min = 1, max = 100) => {\r\n        const res = [];\r\n        for (let i = 0; i < length; i++) {\r\n            const randomNumber = Math.floor(Math.random() * max) + min;\r\n            res.push(randomNumber);\r\n        }\r\n        return res;\r\n    };\r\n\r\n    const column = (arr) =>\r\n        arr.map((item, index) => {\r\n            return (\r\n                <div key={index} className=\"item\">\r\n                    {item}\r\n                </div>\r\n            );\r\n        });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Exercises</h1>\r\n            <h2>I. Przeglądarka</h2>\r\n            <p className=\"description\">\r\n                Zadanie polega na napisaniu skryptu w JavaScript, który po kliknięciu w przycisk wygeneruje 20 losowych\r\n                liczb całkowitych z zakresu od 1 do 100 i umieści je w dwóch kolumnach. W jednej kolumnie mają znaleźć\r\n                się tylko liczby parzyste, a w drugiej nieparzyste. Dodatkowo obie kolumny muszą być posortowane\r\n                rosnąco.\r\n            </p>\r\n\r\n            <button className=\"button\" onClick={sortEvenOddNumbers}>\r\n                Generate numbers\r\n            </button>\r\n\r\n            {oddNumbers && evenNumbers && (\r\n                <div className=\"random-numbers-table\">\r\n                    <div className=\"column\">\r\n                        <div className=\"header\">Odd numbers</div>\r\n                        {column(oddNumbers)}\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div className=\"header\">Even numbers</div>\r\n                        {column(evenNumbers)}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default RandomNumbers;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './library.scss';\r\n\r\nconst Library = () => {\r\n    const [title, setTitle] = useState();\r\n    const [author, setAuthor] = useState();\r\n    const [priority, setPriority] = useState();\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    const [memoryBooks, setMemoryBooks] = useState([]);\r\n\r\n    useEffect(() => {\r\n        loadBooks();\r\n    }, []);\r\n\r\n    const loadBooks = () => {\r\n        const booksArr = [];\r\n        for (const [key, value] of Object.entries(localStorage)) {\r\n            if (key.includes('book-')) {\r\n                const book = JSON.parse(value);\r\n                booksArr.push(book);\r\n            }\r\n        }\r\n        setMemoryBooks(booksArr);\r\n    };\r\n\r\n    const addBook = (e) => {\r\n        e.preventDefault();\r\n\r\n        const book = {\r\n            title,\r\n            author,\r\n            priority,\r\n            categories,\r\n        };\r\n\r\n        localStorage.setItem(`book-${title}`, JSON.stringify(book));\r\n        loadBooks();\r\n\r\n        e.target.reset();\r\n    };\r\n\r\n    const removeBook = (key) => {\r\n        localStorage.removeItem(key);\r\n        loadBooks();\r\n    };\r\n\r\n    const handleCategories = (e) => {\r\n        const res = Array.from(e.target.selectedOptions, (option) => option.value);\r\n        setCategories(res);\r\n    };\r\n\r\n    const row = (book) => {\r\n        return (\r\n            <React.Fragment key={book.title}>\r\n                <div>{book.title}</div>\r\n                <div>{book.author}</div>\r\n                <div>{book.priority}</div>\r\n                <div>{book.categories.join(', ')}</div>\r\n                <div>\r\n                    <button className=\"button\" onClick={() => removeBook(`book-${book.title}`)}>\r\n                        Usunąć\r\n                    </button>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h2>II. Formularze</h2>\r\n            <div className=\"description\">\r\n                <div>\r\n                    Twoim zadaniem jest napisać własną bibliotekę książek z wykorzystaniem HTML, CSS oraz JavaScript, w\r\n                    której znajdzie się formularz przyjmujący następujące pola:\r\n                </div>\r\n                <ol style={{ listStyleType: 'lower-alpha' }}>\r\n                    <li>Tytuł książki (co najmniej 1 znak)</li>\r\n                    <li>Autor książki (co najmniej 3 znaki)</li>\r\n                    <li>Priorytet przeczytania (liczby od 1 do 5)</li>\r\n                    <li>Listę z kategoriami (3 kategorie do wyboru)</li>\r\n                    <li>Przycisk umożliwiający wysyłanie</li>\r\n                </ol>\r\n                <div>\r\n                    Po wysłaniu formularza strona nie może się przeładować. Jednocześnie wyświetl nowo dodaną książkę w\r\n                    tabeli i wyczyść formularz.\r\n                </div>\r\n                <div>Kryteria akceptacji:</div>\r\n                <ul>\r\n                    <li>\r\n                        Walidacja dla pól formularza. W przypadku kiedy jakieś pole nie przechodzi walidacji, książka\r\n                        nie może zostać dodana.\r\n                    </li>\r\n                    <li>Użytkownik ma możliwość dodania kolejnej książki do tabeli.</li>\r\n                    <li>\r\n                        Cała tabela zapisuje się w localstorage (przy ponownym otworzeniu przeglądarki zostaje\r\n                        załadowana ponownie i wyświetlona z takim samym stanem jak była przy zamknięciu).\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n            <form className=\"book-form\" name=\"library\" onSubmit={addBook}>\r\n                <label htmlFor=\"bookTitle\">Tytuł książki (co najmniej 1 znak)</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"bookTitle\"\r\n                    id=\"bookTitle\"\r\n                    minLength=\"1\"\r\n                    title=\"co najmniej 1 znak\"\r\n                    required\r\n                    onChange={(e) => {\r\n                        setTitle(e.target.value);\r\n                    }}\r\n                />\r\n\r\n                <label htmlFor=\"bookAuthor\">Autor książki (co najmniej 3 znaki)</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"bookAuthor\"\r\n                    id=\"bookAuthor\"\r\n                    minLength=\"3\"\r\n                    title=\"co najmniej 3 znaki\"\r\n                    required\r\n                    onChange={(e) => {\r\n                        setAuthor(e.target.value);\r\n                    }}\r\n                />\r\n\r\n                <label htmlFor=\"bookPriority\">Priorytet przeczytania (liczby od 1 do 5)</label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"bookPriority\"\r\n                    id=\"bookPriority\"\r\n                    min=\"1\"\r\n                    max=\"5\"\r\n                    title=\"liczby od 1 do 5\"\r\n                    required\r\n                    onChange={(e) => {\r\n                        setPriority(e.target.value);\r\n                    }}\r\n                />\r\n\r\n                <div>Wybierz kategorie:</div>\r\n                <select size=\"3\" multiple={true} onChange={handleCategories}>\r\n                    <option value=\"textbooks\">Podręczniki</option>\r\n                    <option value=\"fiction\">Literatura piękna</option>\r\n                    <option value=\"journalism\">Publicystyka</option>\r\n                </select>\r\n\r\n                <button type=\"submit\" className=\"button\">\r\n                    Dodać książkę\r\n                </button>\r\n            </form>\r\n\r\n            <div className=\"library-table\">\r\n                <div>Title</div>\r\n                <div>Author</div>\r\n                <div>Priority</div>\r\n                <div>Categories</div>\r\n                <div></div>\r\n                {memoryBooks.map((item) => {\r\n                    return row(item);\r\n                })}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Library;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nconst Quotes = () => {\r\n    const [quotes, setQuotes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        loadQuote();\r\n    }, []);\r\n\r\n    const loadQuote = async () => {\r\n        try {\r\n            const resp = await fetch(\r\n                'https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json'\r\n            );\r\n            const data = await resp.json();\r\n\r\n            const randomNum = Math.floor(Math.random() * data.length);\r\n            const randomQuote = data[randomNum];\r\n\r\n            setQuotes((prevQuotes) => [...prevQuotes, randomQuote]);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n\r\n    const removeQuote = () => {\r\n        if (quotes.length > 1) {\r\n            const newQuotes = [...quotes];\r\n            newQuotes.pop();\r\n            setQuotes(newQuotes);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h2>III. React</h2>\r\n            <p className=\"description\">\r\n                Przygotowanie aplikacji, która będzie pobierała cytaty z API, która będzie wyświetlała losowy cytat:\r\n                <a href=\"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\">\r\n                    link\r\n                </a>\r\n                . Dodatkowo stwórz przycisk który umożliwi wylosowanie następnego cytatu oraz przycisk, który pozwoli na\r\n                powrót do poprzedniego cytatu.\r\n            </p>\r\n\r\n            <button className=\"button\" onClick={loadQuote}>\r\n                Następny cytat\r\n            </button>\r\n            {quotes.length > 1 && (\r\n                <button className=\"button\" onClick={removeQuote}>\r\n                    Poprzedni cytat\r\n                </button>\r\n            )}\r\n\r\n            {quotes.length > 0 && <div>\"{quotes[quotes.length - 1].quote}\"</div>}\r\n            {quotes.length > 0 && <div>{quotes[quotes.length - 1].author}</div>}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Quotes;\r\n","export default __webpack_public_path__ + \"static/media/everest.5050cc15.jpg\";","import React, { useState } from 'react';\r\nimport image from './../../img/everest.jpg';\r\nimport './fill-image.scss';\r\n\r\nconst FillImage = () => {\r\n    const [fill, setFill] = useState(false);\r\n    const body = document.getElementsByTagName('body')[0];\r\n\r\n    const openImg = () => {\r\n        setFill(true);\r\n        body.classList.add('body-fill');\r\n    };\r\n    const closeImg = () => {\r\n        setFill(false);\r\n        body.classList.remove('body-fill');\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h2>IV. Frontend CSS</h2>\r\n            <p className=\"description\">\r\n                Umieść na stronie zdjęcie, które zawsze będzie zajmowało 100% szerokości oraz 100% widoku okna\r\n                przeglądarki. Obrazek ma zachowywać proporcje.\r\n            </p>\r\n            <button className=\"button\" onClick={openImg}>\r\n                Pokaż zdjęcie\r\n            </button>\r\n            {fill && (\r\n                <React.Fragment>\r\n                    <img src={image} alt=\"everest\" className=\"fill-image\" />\r\n                    <div className=\"fill-image-close\" onClick={closeImg}></div>\r\n                </React.Fragment>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default FillImage;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.scss';\n\nimport RandomNumbers from './components/random-numbers/random-numbers';\nimport Library from './components/library/library';\nimport Quotes from './components/quotes/quotes';\nimport FillImage from './components/fill-image/fill-image';\n\nconst App = () => {\n    return (\n        <React.Fragment>\n            <RandomNumbers />\n            <Library />\n            <Quotes />\n            <FillImage />\n        </React.Fragment>\n    );\n};\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}